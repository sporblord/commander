"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[812],{5436:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=t(2488),o=t(7052);const s={description:"Learn how to define and register commands"},a="Commands",i={id:"guides/commands",title:"Commands",description:"Learn how to define and register commands",source:"@site/docs/guides/commands.mdx",sourceDirName:"guides",slug:"/guides/commands",permalink:"/commander/docs/guides/commands",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"Learn how to define and register commands"},sidebar:"docsSidebar",previous:{title:"Guides",permalink:"/commander/docs/guides/"},next:{title:"Types",permalink:"/commander/docs/guides/types"}},d={},c=[{value:"What are commands?",id:"what-are-commands",level:2},{value:"Defining commands",id:"defining-commands",level:2},{value:"Command interactions",id:"command-interactions",level:2},{value:"Command groups",id:"command-groups",level:2},{value:"Nested groups",id:"nested-groups",level:3},{value:"Command guards",id:"command-guards",level:2},{value:"Registering commands",id:"registering-commands",level:2},{value:"Type safety",id:"type-safety",level:2},{value:"Summary",id:"summary",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"commands",children:"Commands"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["To avoid confusing bugs or errors, make sure to look at ",(0,r.jsx)(n.a,{href:"#type-safety",children:"type safety"}),"!"]})}),"\n",(0,r.jsx)(n.h2,{id:"what-are-commands",children:"What are commands?"}),"\n",(0,r.jsxs)(n.p,{children:["Commands are functions that players can execute. They're defined by their ",(0,r.jsx)(n.strong,{children:"name"})," and ",(0,r.jsx)(n.strong,{children:"group"})," and can\nhave ",(0,r.jsx)(n.strong,{children:"arguments"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A command does not necessarily have to belong to a ",(0,r.jsx)(n.strong,{children:"group"}),". Groups are simply a way to organize\nyour commands, effectively turning them into subcommands."]}),"\n",(0,r.jsxs)(n.p,{children:["If the command has arguments, the player's text input may be ",(0,r.jsx)(n.strong,{children:"transformed"})," into a new value, which is then\npassed to the command function. The argument's ",(0,r.jsx)(n.strong,{children:"type"})," handles this transformation."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-commands",children:"Defining commands"}),"\n",(0,r.jsxs)(n.p,{children:["Commands are defined using ",(0,r.jsx)(n.strong,{children:"decorators"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"There are three decorators that you'll likely use the most:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@Commander"})," - Classes containing commands ",(0,r.jsx)(n.strong,{children:"must"})," be decorated with this to be registered"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@Command"})," - This is used to define commands"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@Group"})," - This is used to assign a command to a group"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A command can be defined as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Commander()\nclass EchoCommand {\n    @Command({\n        name: "echo",\n        description: "Displays text",\n        arguments: [\n            {\n                name: "text",\n                description: "The text to display",\n                type: CommanderType.String,\n            },\n        ],\n    })\n    echo(interaction: CommandInteraction, text: string) {\n        interaction.reply(text);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"command-interactions",children:"Command interactions"}),"\n",(0,r.jsxs)(n.p,{children:["Each command is passed a ",(0,r.jsx)(n.code,{children:"CommandInteraction"})," as its first argument. A ",(0,r.jsx)(n.code,{children:"CommandInteraction"})," contains data\nsuch as the ",(0,r.jsx)(n.code,{children:"Player"})," who executed the command and the text used to execute the command."]}),"\n",(0,r.jsx)(n.p,{children:"You can access the interaction's data like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Command({ name: "printInteraction" })\nprintInteraction(interaction: CommandInteraction) {\n    print(`${interaction.executor.Name} executed: ${interaction.text}`);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"It also allows you to send a reply to the executor of the command, like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Command({ name: "hello" })\nhello(interaction: CommandInteraction) {\n    // You can use rich text here!\n    interaction.reply(`Hello, ${interaction.executor.Name}!`);\n}\n\n@Command({ name: "error" })\nerrorMessage(interaction: CommandInteraction) {\n    interaction.error("An <b>error</b> occurred.");\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"command-groups",children:"Command groups"}),"\n",(0,r.jsx)(n.p,{children:"Groups are simply a way to organize your commands. Any command assigned under a group\nwill effectively become a subcommand."}),"\n",(0,r.jsxs)(n.p,{children:["Groups must be defined in the ",(0,r.jsx)(n.code,{children:"@Commander"})," decorator in order to be used."]}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"@Group"})," decorator to assign a command to a group."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, let's say you want to organize ",(0,r.jsx)(n.code,{children:"view"})," and ",(0,r.jsx)(n.code,{children:"delete"})," commands under a\n",(0,r.jsx)(n.code,{children:"profile"})," group:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Commander({\n\tgroups: [\n\t\t{\n\t\t\tname: "profile",\n\t\t\tdescription: "Profile commands",\n\t\t},\n\t],\n})\nclass ProfileCommand {\n\t@Command({\n\t\tname: "view",\n\t\tdescription: "Views a player\'s profile",\n\t\targuments: [\n\t\t\t{\n\t\t\t\tname: "player",\n\t\t\t\tdescription: "The player",\n\t\t\t\ttype: CommanderType.Player,\n\t\t\t},\n\t\t],\n\t})\n\t@Group("profile")\n\tview(interaction: CommandInteraction, player: Player) {}\n\n\t@Command({\n\t\tname: "delete",\n\t\tdescription: "Deletes a player\'s profile",\n\t\targuments: [\n\t\t\t{\n\t\t\t\tname: "player",\n\t\t\t\tdescription: "The player",\n\t\t\t\ttype: CommanderType.Player,\n\t\t\t},\n\t\t],\n\t})\n\t@Group("profile")\n\tdelete(interaction: CommandInteraction, player: Player) {}\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can also add ",(0,r.jsx)(n.strong,{children:"global groups"}),", which are assigned to all commands in the class:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Commander({\n\tgroups: [\n\t\t{\n\t\t\tname: "profile",\n\t\t\tdescription: "Profile commands",\n\t\t},\n\t],\n\n\tglobalGroups: ["profile"],\n})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nested-groups",children:"Nested groups"}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.strong,{children:"root"})," group can have child group(s)."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"root"})," group is any group that does not have a parent group; it is top-level.\nThis limitation means that groups can have at most ",(0,r.jsx)(n.strong,{children:"two layers"})," of nesting. This may be changed\nin the future."]}),"\n",(0,r.jsxs)(n.p,{children:["To define a group as a child of another group, you specify its name using the ",(0,r.jsx)(n.code,{children:"root"})," key:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Commander({\n\tgroups: [\n\t\t{\n\t\t\tname: "info",\n\t\t\tdescription: "View info about a user or the server",\n\t\t},\n\t\t{\n\t\t\tname: "user",\n\t\t\tdescription: "View info about a user",\n\t\t\troot: "info",\n\t\t},\n\t\t{\n\t\t\tname: "server",\n\t\t\tdescription: "View info about the server",\n\t\t\troot: "info",\n\t\t},\n\t],\n})\nclass InfoCommand {\n\t@Command({\n\t\tname: "view",\n        description: "View information about a player",\n\t\targuments: [{ name: "player", description: "Player to view information for", type: CommanderType.Player }],\n\t})\n\t// If info was a global group, you could do @Group("user") here\n    // highlight-next-line\n\t@Group("info", "user")\n\tuserView(interaction: CommandInteraction, player: Player) {}\n\n\t@Command({\n\t\tname: "view",\n        description: "View information about the server",\n\t})\n\t@Group("info", "server")\n\tserverView(interaction: CommandInteraction, player: Player) {}\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"command-guards",children:"Command guards"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If a reply is sent in a guard (through ",(0,r.jsx)(n.code,{children:"reply"})," or ",(0,r.jsx)(n.code,{children:"error"}),"), the command will not be executed."]})}),"\n",(0,r.jsxs)(n.p,{children:["A command guard is simply a function that can be used to determine if a command should be executed.\nYou can use the ",(0,r.jsx)(n.code,{children:"@Guard"})," decorator to assign guards to a command."]}),"\n",(0,r.jsxs)(n.p,{children:["A guard function is passed the same ",(0,r.jsx)(n.code,{children:"CommandInteraction"})," that will be passed to the command. You can use this to access\ndata such as the command path or executor and you can send a reply using its ",(0,r.jsx)(n.code,{children:"reply"})," and ",(0,r.jsx)(n.code,{children:"error"})," methods."]}),"\n",(0,r.jsxs)(n.p,{children:["A guard function should also return a ",(0,r.jsx)(n.code,{children:"boolean"})," - ",(0,r.jsx)(n.code,{children:"true"})," if the command should be executed, ",(0,r.jsx)(n.code,{children:"false"})," if not."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'const isAdmin: CommandGuard = (interaction) => {\n    if (interaction.executor.UserId !== 1) {\n        interaction.error("Insufficient permission!");\n        return false;\n    }\n\n    return true;\n};\n\n@Commander()\nclass KickCommand {\n    @Command({\n        name: "kick",\n        description: "Kick a player",\n        arguments: [\n            {\n                name: "player",\n                description: "Player to kick",\n                type: CommanderType.Player\n            }\n        ]\n    })\n    @Guard(isAdmin)\n    kick(interaction: CommandInteraction, player: Player) {\n\t\tplayer.Kick("You have been kicked from the server.");\n        interaction.reply(`Successfully kicked ${player.Name}`);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"registering-commands",children:"Registering commands"}),"\n",(0,r.jsx)(n.p,{children:"Commands need to be registered to be used."}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"/commander/docs/guides/registration#commands",children:"Registration"})," to learn how commands are registered."]}),"\n",(0,r.jsx)(n.h2,{id:"type-safety",children:"Type safety"}),"\n",(0,r.jsx)(n.p,{children:"Type safety can only be provided if the types for your arguments match your parameters' types."}),"\n",(0,r.jsxs)(n.p,{children:["It's worth keeping in mind that ",(0,r.jsx)(n.strong,{children:"no warning or error will be displayed"})," for argument\nand parameter types that do not match. To avoid confusing bugs or errors, you should exercise\ncaution when defining command arguments and ensure they have the correct type."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the following code would ",(0,r.jsx)(n.strong,{children:"not"})," be type-safe - the argument types and parameter types don't match!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Command({\n    name: "echo",\n    description: "Displays text",\n    arguments: [\n        {\n            name: "text",\n            description: "The text to display",\n            // highlight-next-line\n            type: CommanderType.String, // We\'re requiring a string for this argument...\n        },\n    ],\n})\n// error-next-line\necho(interaction: CommandInteraction, text: number) {} // But we\'re requiring a number here!\n'})}),"\n",(0,r.jsx)(n.p,{children:"In order to assert that the argument and parameter types are equal, we would need a way to\nretrieve each parameter's type. Unfortunately, this is not possible without using a TypeScript transformer.\nThere are no plans to implement this currently, as it would require manual configuration and\nadd a significant maintenance cost to the project."}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Commands"})," are functions executed by players, defined by their name and group."]}),"\n",(0,r.jsxs)(n.li,{children:["All classes containing commands must be decorated with the ",(0,r.jsx)(n.code,{children:"@Commander"})," decorator."]}),"\n",(0,r.jsxs)(n.li,{children:["Commands are defined using the ",(0,r.jsx)(n.code,{children:"@Command"})," decorator."]}),"\n",(0,r.jsxs)(n.li,{children:["You can ",(0,r.jsx)(n.strong,{children:"group"})," commands with the ",(0,r.jsx)(n.code,{children:"@Group"})," decorator."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type safety"})," is only provided if the argument and parameter types match."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},7052:(e,n,t)=>{t.d(n,{I:()=>i,M:()=>a});var r=t(6651);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);