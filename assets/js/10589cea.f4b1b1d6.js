"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[544],{3652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(2488),a=t(7052);const o={description:"See examples for Commander"},i="Examples",s={id:"getting-started/examples",title:"Examples",description:"See examples for Commander",source:"@site/docs/getting-started/examples.mdx",sourceDirName:"getting-started",slug:"/getting-started/examples",permalink:"/commander/docs/getting-started/examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"See examples for Commander"},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/commander/docs/getting-started/installation"},next:{title:"Guides",permalink:"/commander/docs/guides/"}},m={},d=[{value:"Kick Command",id:"kick-command",level:2},{value:"Info Command",id:"info-command",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h2,{id:"kick-command",children:"Kick Command"}),"\n",(0,r.jsxs)(n.p,{children:["This is an example of a command that uses ",(0,r.jsx)(n.a,{href:"/commander/docs/guides/commands#command-guards",children:"guards"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"A command guard is a function that can determine if a command should be executed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { Command, CommandGuard, CommandInteraction, Commander, CommanderType, Guard } from "@rbxts/commander";\n\nconst isAdmin: CommandGuard = (interaction) => {\n    if (interaction.executor.UserId !== 1) {\n        interaction.error("Insufficient permission!");\n        return false;\n    }\n\n    return true;\n};\n\n@Commander()\nclass KickCommand {\n    @Command({\n        name: "kick",\n        description: "Kick a player",\n        arguments: [\n            {\n                name: "player",\n                description: "Player to kick",\n                type: CommanderType.Player\n            }\n        ]\n    })\n    @Guard(isAdmin)\n    kick(interaction: CommandInteraction, player: Player) {\n        player.Kick("You have been kicked from the server.");\n        interaction.reply(`Successfully kicked ${player.Name}`);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"info-command",children:"Info Command"}),"\n",(0,r.jsxs)(n.p,{children:["This is an example of a command that uses ",(0,r.jsx)(n.a,{href:"/commander/docs/guides/commands#command-groups",children:"groups"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Groups are defined in the ",(0,r.jsx)(n.code,{children:"@Commander"})," decorator. At the moment, only the root group may\nhave children, allowing for 2 layers of nesting - this may be changed in the future, however."]}),"\n",(0,r.jsxs)(n.p,{children:["A command can be assigned to a group using the ",(0,r.jsx)(n.code,{children:"@Group"})," decorator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'@Commander({\n\tgroups: [\n\t\t{\n\t\t\tname: "info",\n\t\t\tdescription: "View info about a user or the server",\n\t\t},\n\t\t{\n\t\t\tname: "user",\n\t\t\tdescription: "View info about a user",\n\t\t\troot: "info",\n\t\t},\n\t\t{\n\t\t\tname: "server",\n\t\t\tdescription: "View info about the server",\n\t\t\troot: "info",\n\t\t},\n\t],\n\n\t// Global groups are groups assigned to all commands\n\t// defined in this class.\n\tglobalGroups: ["info"],\n})\nclass InfoCommand {\n\t// This command will be executable through "info user view" once registered!\n\t@Command({\n\t\tname: "view",\n\t\targuments: [\n\t\t\t{\n\t\t\t\tname: "player",\n\t\t\t\tdescription: "Player to display information about",\n\t\t\t\ttype: CommanderType.Player,\n\t\t\t},\n\t\t],\n\t})\n\t@Group("user") // You can also define groups like this: @Group("info", "user")\n\tuserView(interaction: CommandInteraction, player: Player) {\n\t\tinteraction.reply(`<Random data about ${player.Name}...>`);\n\t}\n\n\t// This command can have the same name as the above command, because it\n\t// is grouped under "server" instead.\n\t// This command will be executable through "info server view" once registered!\n\t@Command({\n\t\tname: "view",\n\t})\n\t@Group("server")\n\tserverView(interaction: CommandInteraction) {\n\t\tinteraction.error("Not implemented!");\n\t}\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},7052:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>i});var r=t(6651);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);